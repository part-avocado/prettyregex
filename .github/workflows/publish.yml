name: Publish Package

on:
  push:
    tags:
      - 'v*'  # Triggers on version tags like v1.0.5

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Publish to NPM
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ steps.get_version.outputs.VERSION }}
          body: |
            ## What's Changed
            
            This release includes:
            - Bug fixes and improvements
            - See CHANGELOG.md for detailed changes
            
            ## Installation
            
            ```bash
            npm install prx-regex@${{ steps.get_version.outputs.VERSION }}
            ```
          draft: false
          prerelease: false

      - name: Create GitHub Package
        uses: actions/github-script@v7
        with:
          script: |
            const { data: releases } = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            
            const latestRelease = releases.find(release => 
              release.tag_name === context.ref.replace('refs/tags/', '')
            );
            
            if (latestRelease) {
              // Create a package asset
              const packageName = `prx-regex-${context.ref.replace('refs/tags/v', '')}.tgz`;
              
              try {
                // Download the npm package
                const response = await fetch(`https://registry.npmjs.org/prx-regex/-/prx-regex-${context.ref.replace('refs/tags/v', '')}.tgz`);
                
                if (response.ok) {
                  const buffer = await response.arrayBuffer();
                  
                  // Upload as release asset
                  await github.rest.repos.uploadReleaseAsset({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    release_id: latestRelease.id,
                    name: packageName,
                    data: Buffer.from(buffer)
                  });
                  
                  console.log(`✅ Created GitHub package: ${packageName}`);
                } else {
                  console.log(`⚠️ Could not download npm package: ${response.status} ${response.statusText}`);
                }
              } catch (error) {
                console.log(`⚠️ Error creating GitHub package: ${error.message}`);
              }
            } 